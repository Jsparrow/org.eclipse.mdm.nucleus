/*
 * Copyright (c) 2016 Gigatronik Ingolstadt GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

description = 'MDM Web Application'
group = 'org.eclipse.mdm'
version = '1.0.0'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}


buildscript {
	repositories {
		jcenter()
	}	
}


dependencies {
       
	// Jersey 2.15
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.15'
	
	//MDM Components		
	compile 'org.eclipse.mdm:org.eclipse.mdm.navigator:1.0.0'
	compile 'org.eclipse.mdm:org.eclipse.mdm.action.delete:1.0.0'
	compile 'org.eclipse.mdm:org.eclipse.mdm.i18n:1.0.0'
	
	//Logging
	runtime 'org.slf4j:slf4j-simple:1.7.19'	
    
}

task cleanBackend << {
	tasks.getByPath("org.eclipse.mdm.api.base:clean").execute()
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:clean").execute()	
	tasks.getByPath("org.eclipse.mdm.connector:clean").execute()
	tasks.getByPath("org.eclipse.mdm.businesstyperegistry:clean").execute()
	tasks.getByPath("org.eclipse.mdm.i18n:clean").execute()	
	tasks.getByPath("org.eclipse.mdm.action.delete:clean").execute()
	tasks.getByPath("org.eclipse.mdm.navigator:clean").execute()
}
cleanBackend.finalizedBy(clean)

task installBackend << {

	tasks.getByPath("org.eclipse.mdm.api.base:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.api.base:jar").execute()
	tasks.getByPath("org.eclipse.mdm.api.base:install").execute()
				
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:compileIDL").execute()	
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:compileGeneratedJava").execute()		
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:jar").execute()
	tasks.getByPath("org.eclipse.mdm.api.odsadapter:install").execute()
		
	tasks.getByPath("org.eclipse.mdm.connector:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.connector:jar").execute()
	tasks.getByPath("org.eclipse.mdm.connector:install").execute()
			
	tasks.getByPath("org.eclipse.mdm.businesstyperegistry:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.businesstyperegistry:jar").execute()
	tasks.getByPath("org.eclipse.mdm.businesstyperegistry:install").execute()
				
	tasks.getByPath("org.eclipse.mdm.i18n:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.i18n:jar").execute()
	tasks.getByPath("org.eclipse.mdm.i18n:install").execute()
				
	tasks.getByPath("org.eclipse.mdm.action.delete:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.action.delete:jar").execute()
	tasks.getByPath("org.eclipse.mdm.action.delete:install").execute()
				
	tasks.getByPath("org.eclipse.mdm.navigator:compileJava").execute()	
	tasks.getByPath("org.eclipse.mdm.navigator:jar").execute()
	tasks.getByPath("org.eclipse.mdm.navigator:install").execute()
			
}
installBackend.finalizedBy(install)


task collectFrontend() {

	copy {
		from "${project.projectDir}/src/main/webapp/"
		into "${project.projectDir}/build/tmp/frontend/"
	}

	subprojects.each {
		subproject ->
		copy {
			from "${project.projectDir}/../${subproject.name}/src/main/webapp/"
			into "${project.projectDir}/build/tmp/frontend"
		}	
	}	
}


task cleanFrontend(type: Delete) {
	delete "${project.projectDir}/build/distributions/org.eclipse.mdm.application-1.0.0.zip"
	delete "${project.projectDir}/build/tmp/frontend"
}



task installFrontend(type: Zip, dependsOn: collectFrontend) {
	from "${project.projectDir}/build/tmp/frontend"
}

